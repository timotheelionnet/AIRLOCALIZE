function loc = AIRLOCALIZE(varargin)
% GUI-less operation: 
    % AIRLOCALIZE(parametersFilename) 
    % loads a text file holding all parameters 
    % needed for analysis

% GUI mode: lets the user interactively set all parameters
    % AIRLOCALIZE()  (a pop up will appear for file loading)
    % GUI mode is compatible with batch analysis.
    
% AIRLOCALIZE_version = 1.7;  

addpath('subfunctions');
addpath('subfunctions/iniconfig');

persistent params;
loc = [];
verbose = 1;

%% collect parameters
if nargin == 0  
    % if no input selected, enter parameters via GUI
    [params,alData] = set_detection_parameters4(params); 
    if strcmp(params.fileProcessingMode,'cancel'), return;  end   
elseif nargin == 1
    % read parameters from config file
    disp('reading config file...');
    parametersFilename = varargin{1};
    if ~isa(params,'airlocalizeParams') 
        params = airLocalizeParams();
        params.reset();
    end
    [params,status] = params.read_params_from_file2(parametersFilename);
    if strcmp(status,'cancel'), return;  end 
    
    % get list of files to analyze
    disp('collecting list of files to analyze...');
    alData = airLocalizeData();
    alData.setFListFromParams(params);
    if isempty(alData.getImgFileList)
        disp('could not find files to analyze.');
        return
    else
        disp(['Found ',num2str(numel(alData.getImgFileList)),' files to analyze.']);
    end
    
    % if empty, default saving dir to the dir holding the first image in the
    % list
    if isempty(params.saveDirName)
        params.saveDirName = fileparts(alData.imgFileList{1});
    end

    % set movie mode
    if contains(params.fileProcessingMode,'movie') ...
            || contains(params.fileProcessingMode,'Movie')
        alData.isMovie = 1;
    end
    
    % figure out data dimensionality on first file of the list.
    disp('setting data dimensionality...');
    params.getNumDim(alData.getImgFileList);
    if strcmp(params.fileProcessingMode,'cancel'), return;  end
    
    % check parameters consistency
    params.checkParamsConsistency(alData,'numDim');
    
    % set PSF width manually (optional)
    alData.setFileIdx(1);
    if params.setPsfInteractively == 1
        disp('setting PSF size interactively...');
        [params,alData] = set_psf_size_manually(params,alData);
    end
    if strcmp(params.fileProcessingMode,'cancel'), return; end

    % set Int threshold manually (optional) 
    alData.setFileIdx(1);
    if params.setThreshInteractively  == 1 
       disp('setting threshold interactively...');
       params = set_threshold_manually(params,alData); 
    end
    if strcmp(params.fileProcessingMode,'cancel'), return; end
end

%% analyze file(s)

% create saving dir if necessary
if ~isempty(params.saveDirName)
    if ~exist(params.saveDirName,'dir')
        disp(['Creating saving directory ',params.saveDirName,' ...']);
        mkdir(params.saveDirName);
    end
end

for i=1:numel(alData.imgFileList)
    % update the current file in the list
    alData.setFileIdx(i);
    disp(['analyzing file: ',alData.curImgFile,'...']);
    
    % retrieve current image
    overwrite = i~=1;
    alData.retrieveImg(overwrite);
    
    % verify that dimensionality agrees with settings
    skipFile = 0;
    nd  = ndims(alData.img);
    if nd == 2
        if params.numDim == 3
            disp(['  Current image has ',num2str(nd),...
                ' dimensions but expecting 3D data; skipping file']);
            skipFile = 1;
        end
        if alData.isMovie
            disp('  Warning: file expected to be a movie but 2D image was found.');
        end
    elseif nd == 3
        if params.numDim == 2 && ~alData.isMovie
            disp(['  Current image has ',num2str(nd),...
                ' dimensions but expecting 2D data; skipping file']);
            skipFile = 1;
        end
    else
        skipFile = 1;
        disp(['  Current image has ',num2str(nd),...
            ' dimensions; cannot analyze; skipping file']);
    end
    
    if skipFile
        continue;
    end

    % retrieve mask if in adaptive threshold mode
    if strcmp(params.threshUnits,'adaptive')
        alData.retrieveMask(overwrite);
    end

    % smooth the image
    alData.retrieveSmoothedImg(params,overwrite);

    % go through all frames (if file is an image, just one "frame")
    loc = [];
    locVars = [];
    for j = 1 : alData.nFrames
        if alData.isMovie
            disp(['  analyzing frame ',num2str(j),'...']);
        end
        if alData.nFrames > 100
            if mod(j,100) == 0
                disp(['  analyzing frame ',num2str(j),'...']);
            end
        end
        
        % update current frame
        alData.setCurFrame(j);

        % predetection of local maxima
        spotCandidates = find_isolated_maxima_clean3(...
            alData,params,verbose);   

        % detection/quantification
        [tmpLoc,locVars] = run_gaussian_fit_on_all_spots_in_image3(...
            spotCandidates,alData,params);

        % add mask IDs for adaptive mode
        [tmpLoc,locVars] = assignMaskIDsToSpots(tmpLoc,locVars,alData,params);
        
        loc = [loc; tmpLoc];
        
        % [tmpLoc,tmpLocVars] = localizeImgPairAdaptive(...
        %         alData.img,alData.mask,'locParams',params);
        % if isempty(tmpLocVars)
        %     locVars = tmpLocVars;
        % end
        % 
        % % add mask IDs to each spot if adaptive mode was selected
        % if strcmp(params.threshUnits,'adaptive')
        %     tmpRoiID = [];
        %     if ismember(ndims(alData.mask),[2,3])
        %         if ismatrix(alData.mask)
        %             idx = sub2ind(size(alData.mask), ...
        %                 ceil(tmpLoc(:,1)),ceil(tmpLoc(:,2)) );
        %         elseif ndims(alData.mask) == 3
        %             idx = sub2ind(size(alData.mask), ...
        %                 ceil(tmpLoc(:,1)),ceil(tmpLoc(:,2)),ceil(tmpLoc(:,3)) );
        %         end
        %         tmpRoiID = alData.mask(idx);
        %     end 
        %     if ~isempty(tmpRoiID)
        %         tmpLoc = [tmpLoc(:,end-1),...
        %             repmat(tmpRoiID,size(tmpLoc,1),1),tmpLoc(:,end)];
        %         tmpLocVars = [tmpLocVars(1:end-1),'ROI_ID',tmpLocVars(end)];
        %     end
        % end
        % 
        % if isequal(locVars,tmpLocVars)
        %     loc = [loc; tmpLoc];
        % else
        %     loc = concatenateRowsBasedOnStrings(...
        %         loc,tmpLoc,locVars,tmpLocVars);
        % end
    end
    
    % save spot coordinates and detection parameters to text file
    params.saveLocAndPar(loc,locVars,alData);
    
    if params.outputSpotsImage
        disp('  saving spots image...');
        params.saveSpotImg(loc,locVars,alData);
    end
    disp('  done analyzing file.');
end
disp('done.');

end

function c = concatenateRowsBasedOnStrings(data1,data2,vars1,vars2)
    % Ensure strings for robust comparison
    keys1 = string(vars1);
    keys2 = string(vars2);
    
    n2 = size(data2,1);
    tmpData2 = [];
    for i=1:numel(keys1)
        idx = ismember(keys2,key1{i});
        if sum(idx) == 1
            tmpData2 = [tmpData2, data2(:,idx)];
        else
            tmpData2 = [tmpData2, NaN*ones(n2,1)];
        end
    end

    c = [data1;tmpData2];
end

function [loc,locVars] = assignMaskIDsToSpots(loc,locVars,alData,params)
    addDummyIDs = 0;
    ignoreIDs = 1;
    if strcmp(params.threshUnits,'adaptive') && ~isempty(alData.mask)
         ignoreIDs = 0;
    end

    if ignoreIDs && addDummyIDs % pad ROI-ID column with zeros if addDummyIDs is selected
        loc = [loc,zeros(size(loc,1),1)];
        locVars = [locVars,'ROI_ID'];
        return
    end
    
    if ndims(alData.mask) == 3
        [nx,ny,nz] = size(alData.mask);
        locPix = [  max(min(loc(:,1),nx),1),...
                    max(min(loc(:,2),ny),1),...
                    max(min(loc(:,3),nz),1)];
        roiIDs = alData.mask(sub2ind(size(alData.mask),locPix()))
    elseif ismatrix(alData.mask)
        [nx,ny] = size(alData.mask);
        locPix = [  max(min(loc(:,1),nx),1),...
                    max(min(loc(:,2),ny),1)];
    end
    
end



