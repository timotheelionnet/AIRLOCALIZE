classdef airLocalizeData < handle & matlab.mixin.Copyable
    
    % object that manages access to data for Airlocalize
    
    properties (GetAccess = 'public', SetAccess = 'public')
        imgFileList; % holds the file list
        curImgFile; % holds the name of the current file
        maskFileList; % holds the file list
        curMaskFile; % holds the name of the current file
        fileIdx; % holds the index of the current file in imgFileList
        img; % holds the raw image/stack data of the current file
        mask; % holds the mask img of the current file
        smooth; % holds the smoothed image/stack data of the current file
        isMovie; % 1 if files in the list are movies, 0 if files are individual images
        nFrames; % number of frames in current file (if movie)
        curFrame; % current frame in current file (if movie)
    end
    
    methods
        % constructor
        function obj = airLocalizeData()
             obj.reset();
        end
        
        function obj = reset(obj)
            obj.imgFileList = {}; 
            obj.curImgFile = ''; 
            obj.maskFileList = {}; 
            obj.curMaskFile = ''; 
            obj.fileIdx = 0; 
            obj.img = []; 
            obj.mask = []; 
            obj.smooth = [];
            obj.isMovie = 0;
            obj.nFrames = 0;
            obj.curFrame = 0;
        end
        
        function obj = resetCurrentFile(obj)
            % resets everything but the file list and the isMovie flag.
            obj.curImgFile = ''; 
            obj.curMaskFile = ''; 
            obj.fileIdx = 0; 
            obj.img = []; 
            obj.mask = []; 
            obj.smooth = [];
            obj.nFrames = 0;
            obj.curFrame = 0;
        end
        
        % generates a list of files to analyze
        % based on dataFileName and fileProcessingMode properties of params
        % airlocalizeParams object.
        function obj = setFileListFromParams(obj,params)
            params.imgFileName
            obj.reset();
            if ismember(params.fileProcessingMode,...
                    {'batch','movieInDir','batchMovie'})
                if ~exist(params.imgFileName,'dir')
                    obj.setImgFileList({});
                    obj.setMaskFileList({});
                    disp(['Could not find data folder ',params.imgFileName]);
                    return
                else
                    caseSensitive = 0;
                    fl = getList(params.imgFileName,params.imgRecursive,...
                        caseSensitive,params.imgInclusionString,params.imgExclusionString);
                    
                    if strcmp(params.threshUnits,'adaptive')
                        flm = getList(params.maskFileName,params.maskRecursive,...
                            caseSensitive,params.maskInclusionString,params.maskExclusionString);
                        fileNamesOnly = 0; % match full paths
                        matchedPairs = match_file_pairs(fl, flm,fileNamesOnly);
                        disp(['Matched ',num2str(size(matchedPairs,1)),...
                            ' image files with their corresponding masks.']);
                        fl = fl(matchedPairs(:,1));
                        flm = flm(matchedPairs(:,2));
                    else
                        flm = {};
                    end
                end
            else
                if ~exist(params.imgFileName,'file')
                    obj.setImgFileList({});
                    obj.setMaskFileList({});
                    disp(['Could not find data file ',params.imgFileName]);
                    return
                else
                    fl = {params.imgFileName};
                end
                if strcmp(params.threshUnits,'adaptive')
                    if ~exist(params.maskFileName,'file')
                        obj.setMaskFileList({});
                        disp(['Could not find data file ',params.maskFileName]);
                        return
                    else
                        flm = {params.maskFileName};
                    end
                else
                    flm = {};
                end
            end
            obj.setImgFileList(fl);
            obj.setMaskFileList(flm);
            if ismember(params.fileProcessingMode,...
                    {'singleMovie','batchMovie'})
                obj.isMovie = 1;
            end
            
            % collect list of files respecting the name rules
            function fl = getList(fileName,recursive,...
                    caseSensitive,inclusionString,exclusionString)

                %format comma-separated list into cell arrays of substrings
                inclusionString = parse_and_format_string_list(inclusionString);
                exclusionString = parse_and_format_string_list(exclusionString);
                
                imgExt = getAllowedImageFormatExtensions();
                fl = {};
                for i=1:numel(imgExt)
                    tmpfl = get_clean_file_list(fileName,...
                        [inclusionString,imgExt(i)] , exclusionString,...
                        recursive,caseSensitive);
                    idx = ones(numel(tmpfl),1);
                    for j=1:numel(tmpfl) %making sure that the files have a legit image extension
                        [~,~,e] = fileparts(tmpfl{j});
                        if ~ismember(e,imgExt)
                            idx(j) = 0;
                        end
                    end
                    tmpfl = tmpfl(logical(idx));
                    fl = [fl;tmpfl];
                end
                fl = unique(fl);
            end
        end
        
        % sets a file list as the imgFileList property
        function obj = setImgFileList(obj,fList)
            mList = obj.maskFileList; % keep the mask list before the reset
            obj.reset();
            obj.maskFileList = mList;
            if iscell(fList)
                obj.imgFileList = fList;
            else 
                disp(['input img file list has wrong format;',...
                    ' resetting airlocalize data object']);
            end
        end
        
        % outputs the file list
        function fList = getImgFileList(obj)
            fList = obj.imgFileList;
        end

        % sets a file list as the imgFileList property
        function obj = setMaskFileList(obj,fList)
            iList = obj.imgFileList; % keep the img list before the reset
            obj.reset();
            obj.imgFileList = iList;
            if iscell(fList)
                obj.maskFileList = fList;
            else 
                disp(['input mask file list has wrong format;',...
                    ' resetting airlocalize data object']);
            end
        end
        
        % outputs the file list
        function fList = getMaskFileList(obj)
            fList = obj.maskFileList;
        end
        
        % sets the index of the current file if compatible with imgFileList size
        function obj = setFileIdx(obj,idx)
            if idx > numel(obj.imgFileList) || idx <= 0
                disp(['cannot access file index ',num2str(idx),...
                    '; file list has ',num2str(numel(obj.imgFileList)),...
                    ' entries']);
                return
            end
            if idx ~= obj.fileIdx
                obj.resetCurrentFile;
                obj.fileIdx = idx;
                obj.curImgFile = obj.imgFileList{idx};
                if idx <= numel(obj.maskFileList)
                    obj.curMaskFile = obj.maskFileList{idx};
                end
            else
                if ~strcmp(obj.curImgFile,obj.imgFileList{idx})
                    obj.resetCurrentFile;
                    obj.fileIdx = idx;
                    obj.curImgFile = obj.imgFileList{idx};
                    if idx <= numel(obj.maskFileList)
                        obj.curMaskFile = obj.maskFileList{idx};
                    end
                else
                    if idx <= numel(obj.maskFileList)
                        if ~strcmp(obj.curMaskFile,obj.maskFileList{idx})
                            obj.curMaskFile = obj.maskFileList{idx};
                        end
                    else
                        if numel(obj.maskFileList) >=1
                            disp(['Warning: Could not find mask file for ',obj.imgFileList{idx}]);
                        end
                        obj.curMaskFile = [];
                    end
                end
            end
        end
        
        function idx = getFileIdx(obj)
            idx = obj.fileIdx;
        end
        
        function obj = setCurImgFile(obj,fileName)
            if ~ismember(fileName,obj.imgFileList)
                disp(['desired file ',fileName,...
                    ' is not part of existing image file list; ',...
                    'cannot set as current.']);
            else
                idx = find(ismember(obj.imgFileList,fileName));
                obj.setFileIdx(idx);
            end
        end
        
        function fileName = getCurImgFile(obj)
            fileName = obj.curImgFile;
        end

        function obj = setCurMaskFile(obj,fileName)
            if ~ismember(fileName,obj.maskFileList)
                disp(['desired file ',fileName,...
                    ' is not part of existing mask file list; ',...
                    'cannot set as current.']);
            else
                idx = find(ismember(obj.maskFileList,fileName));
                obj.setFileIdx(idx);
            end
        end
        
        function fileName = getCurMaskFile(obj)
            fileName = obj.curMaskFile;
        end
        
        function obj = setNFrames(obj)
            overwrite = 0;
            if ~obj.isFileIndexImgLoaded(obj.fileIdx)
                obj.retrieveImg(overwrite);
            end
            s = size(obj.img);
            if ~ismember(numel(s),[2,3])
                disp(['Warning: image ',obj.curImgFile,' has ',...
                    num2str(numel(s)),' dimensions; shhould be 2 or 3.']);
                obj.nFrames = 0;
            elseif numel(s) == 2
                obj.nFrames = 1;
            elseif numel(s) == 3
                obj.nFrames = s(3);
            end
        end
        
        function status = setCurFrame(obj,newFrame)
            if newFrame == obj.curFrame
                status = 1;
                return
            end
            if round(newFrame) ~= newFrame  || newFrame < 1 || ...
                    newFrame > obj.nFrames
                status = 0;
            else
                obj.curFrame = newFrame;
            end
        end
        
        function isLoaded = isFileIndexImgLoaded(obj,idx)
            isLoaded = 0;
            if obj.fileIdx == idx && idx > 0 && idx <= numel(obj.imgFileList) ...
                && ~isempty(obj.curImgFile) && ~isempty(obj.img)
                if strcmp(obj.curImgFile,obj.imgFileList{idx})
                        isLoaded = 1;
                end
            end    
        end

        function isLoaded = isFileIndexMaskLoaded(obj,idx)
            isLoaded = 0;
            if obj.fileIdx == idx && idx > 0 && idx <= numel(obj.maskFileList) ...
                && ~isempty(obj.curMaskFile) && ~isempty(obj.mask)
                if strcmp(obj.curMaskFile,obj.maskFileList{idx})
                    isLoaded = 1;
                end
                
            end    
        end
        
        function isLoaded = isFileNameImgLoaded(obj,fileName)
            isLoaded = 0;
            if obj.fileIdx > 0 && obj.fileIdx <= numel(obj.imgFileList)
                if strcmp(obj.imgFileList{obj.fileIdx},fileName) ...
                    && ~isempty(obj.curImgFile) && ~isempty(obj.img)
                    if strcmp(obj.curImgFile,obj.imgFileList{idx})
                        isLoaded = 1;
                    end
                end
            end    
        end
        
        function isLoaded = isFileIndexSmoothedImgLoaded(obj,idx)
            isLoaded = 0;
            if obj.fileIdx == idx && idx > 0 && idx <= numel(obj.imgFileList) ...
                && ~isempty(obj.curImgFile) && ~isempty(obj.smooth)
                if numel(obj.imgFileList) >= idx
                    if strcmp(obj.curImgFile,obj.imgFileList{idx})
                        isLoaded = 1;
                    end
                end
            end    
        end
        
        function isLoaded = isFileNameSmoothLoaded(obj,fileName)
            isLoaded = 0;
            if obj.fileIdx > 0 && obj.fileIdx <= numel(obj.imgFileList)
                if strcmp(obj.imgFileList{obj.fileIdx},fileName) ...
                    && ~isempty(obj.curImgFile) && ~isempty(obj.smooth)
                    if strcmp(obj.curImgFile,obj.imgFileList{idx})
                        isLoaded = 1;
                    end
                end
            end    
        end
        
        function obj = retrieveImg(obj,overwrite)
            if obj.fileIdx < 0 || obj.fileIdx > numel(obj.imgFileList)
                obj.img = [];
                return
            else
                if ~obj.isFileIndexImgLoaded(obj.fileIdx) || overwrite
                    [obj.img,nSlices] = ...
                        timtiffread(obj.imgFileList{obj.fileIdx});
                    obj.smooth = []; % reset smooth and mask images
                    obj.mask = [];
                    obj.curFrame = 0;
                    if obj.isMovie
                        obj.nFrames = nSlices;
                    else
                        obj.nFrames = 1;
                    end
                end
            end
        end

        function obj = retrieveMask(obj,overwrite)
            % load mask and check compatibility with image
            if obj.fileIdx < 0 || obj.fileIdx > numel(obj.maskFileList)
                obj.mask = [];
                return
            else
                if ~obj.isFileIndexMaskLoaded(obj.fileIdx) || overwrite
                    [loadedMask,nSlices] = timtiffread(obj.maskFileList{obj.fileIdx});
                    % make sure that the loaded image is up to date.
                    if ~obj.isFileIndexImgLoaded(obj.fileIdx)
                        obj.retrieveImg(1);
                    end
                    % if image is correctly loaded, we check dimensionality
                    % compatibility between the image and the mask 
                    if obj.isFileIndexImgLoaded(obj.fileIdx)
                        if obj.isMovie
                            if nSlices == 1 
                                if obj.nFrames > 1
                                    obj.mask = repmat(loadedMask,1,1,obj.nFrames);
                                else
                                    obj.mask = loadedMask;
                                end
                            elseif nSlices == obj.nFrames
                                obj.mask = loadedMask;
                            else
                                disp(['Mask ',obj.curMaskFile,...
                                    ' has a different number of frames ',...
                                    'than the image movie',obj.curImgFile,...
                                    '; cannot load.']);
                                obj.mask = [];
                            end
                        else
                            if ismatrix(obj.img)
                                if nSlices == 1 
                                    obj.mask = loadedMask;
                                else
                                    disp(['Mask ',obj.curMaskFile,...
                                        'has a different number of slices ',...
                                        'than the 2D image file',obj.curImgFile,...
                                        '; cannot load.']);
                                    obj.mask = [];
                                end
                            elseif ndims(obj.img) == 3 
                                if nSlices == size(obj.img,3)
                                    obj.mask = loadedMask;
                                elseif nSlices == 1 
                                    obj.mask = repmat(loadedMask,1,1,size(obj.img,3));    
                                else
                                    disp(['Mask ',obj.curMaskFile,...
                                        'has a different number of slices ',...
                                        'than the 3D image file',obj.curImgFile,...
                                        '; cannot load.']);
                                    obj.mask = [];
                                end
                            else
                                disp(['Loaded image ',obj.curImgFile,...
                                    'dimensionality should be 2 or 3;',...
                                    ' aborting mask loading ',obj.curMaskFile]);
                                    obj.mask = [];
                            end
                        end
                    else
                        % if image didn't load or is incorrect, we return an
                        % empty mask 
                        disp(['Could not load image ',obj.curImgFile,...
                                '; aborting mask loading ',obj.curMaskFile]);
                        obj.mask = [];
                    end
                end
            end
        end
        
        function obj = retrieveSmoothedImg(obj,params,overwrite)
            if obj.fileIdx < 0 || obj.fileIdx > numel(obj.imgFileList)
                obj.smooth = [];
                return
            else
                if ~obj.isFileIndexSmoothedImgLoaded(obj.fileIdx) || overwrite
                    if ~obj.isFileIndexImgLoaded(obj.fileIdx) || overwrite
                        obj.retrieveImg(overwrite);
                    end

                    if strcmp(params.threshUnits,'adaptive')
                        if ~obj.isFileIndexMaskLoaded(obj.fileIdx) || overwrite
                            obj.retrieveMask(overwrite);
                        end
                        if obj.isFileIndexMaskLoaded(obj.fileIdx)
                            start1 = tic
                            obj.smooth = smooth_image_and_subtract_background9(...
                                obj.img,params,'mask',obj.mask);
                            t1 = toc(start1)
                        else
                            disp(['Warning: mask image ', obj.curMaskFile,...
                                'not loaded, cannot use it to smooth ',...
                                obj.curImgFile]);
                        end
                    else
                        obj.smooth = smooth_image_and_subtract_background9(...
                            obj.img,params);
                        t1 = toc(start1)
                    end
                end
            end
        end
    end
end
